use super::*;
use crate::t_xor_plus::{
    add_constant_plus, add_constant_xor, block_to_matrix, mix_columns, rotate_rows, s_box_layer,
};
use crate::t_xor_plus::{t_plus_l, t_xor_l};

#[test]
fn test_pad_message() {
    let message = b"hello";
    let padded_message = pad_message(message, L512);
    assert_eq!(padded_message.len() % (L512 / 8), 0);
}

#[test]
fn test_pad_message_official_example() {
    let input = &[
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F,
    ];

    let expected_output = &[
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let padded_message = pad_message(input, L512);

    println!("message_len: {:?}", padded_message.len());
    println!("output_len: {:?}", expected_output.len());

    assert_eq!(padded_message, expected_output);
}

#[test]
fn test_pad_message_length() {
    let message = b"hello";
    let padded_message = pad_message(message, L512);
    let length_field = &padded_message[padded_message.len() - 12..];
    let length_bits = u128::from_le_bytes({
        let mut temp = [0u8; 16];
        temp[0..12].copy_from_slice(length_field);
        temp
    });
    assert_eq!(length_bits, (message.len() * 8) as u128);
}

#[test]
fn test_add_constant_xor() {
    let input = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F,
    ];
    let expected_output = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x18, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x30, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x28, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x60, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x78, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x50, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x48, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F,
    ];
    let input_matrix = block_to_matrix(&input);
    let result = add_constant_xor(input_matrix, 0);
    assert_eq!(result, block_to_matrix(&expected_output));
}

#[test]
fn test_add_constant_plus() {
    let input = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F,
    ];
    let expected_output = [
        0xF3, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x77, 0xFB, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
        0x6F, 0x03, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x68, 0x0B, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x60, 0x13, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x58, 0x1B, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x50, 0x23, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x48, 0x2B, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x40,
    ];
    let input_matrix = block_to_matrix(&input);
    let result = add_constant_plus(input_matrix, 0);
    assert_eq!(result, block_to_matrix(&expected_output));
}

#[test]
fn test_s_box_layer() {
    let input = [
        0xF3, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x77, 0xFB, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE,
        0x6F, 0x03, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x68, 0x0B, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x60, 0x13, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x58, 0x1B, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x50, 0x23, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x48, 0x2B, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x40,
    ];
    let expected_output = [
        0xED, 0xC2, 0xA0, 0xF0, 0x4E, 0xED, 0x54, 0xEC, 0xCA, 0x7F, 0x21, 0xC9, 0x7C, 0xC0, 0x74,
        0x60, 0x06, 0xEB, 0xB5, 0x73, 0x75, 0x13, 0xFC, 0x9B, 0x95, 0xD6, 0x02, 0x54, 0xF0, 0x17,
        0x59, 0x72, 0xCB, 0x56, 0xC2, 0x2D, 0x4D, 0x88, 0xA3, 0xA1, 0xFD, 0x36, 0xD4, 0x25, 0x4B,
        0x67, 0xE1, 0x31, 0x4F, 0x64, 0xD8, 0xED, 0xB6, 0x22, 0x85, 0xE9, 0xE1, 0x02, 0xC8, 0xD1,
        0xD2, 0x73, 0x72, 0xB5,
    ];
    let input_matrix = block_to_matrix(&input);
    let result = s_box_layer(input_matrix);
    assert_eq!(result, block_to_matrix(&expected_output));
}

#[test]
fn test_rotate_rows() {
    let input = [
        0xED, 0xC2, 0xA0, 0xF0, 0x4E, 0xED, 0x54, 0xEC, 0xCA, 0x7F, 0x21, 0xC9, 0x7C, 0xC0, 0x74,
        0x60, 0x06, 0xEB, 0xB5, 0x73, 0x75, 0x13, 0xFC, 0x9B, 0x95, 0xD6, 0x02, 0x54, 0xF0, 0x17,
        0x59, 0x72, 0xCB, 0x56, 0xC2, 0x2D, 0x4D, 0x88, 0xA3, 0xA1, 0xFD, 0x36, 0xD4, 0x25, 0x4B,
        0x67, 0xE1, 0x31, 0x4F, 0x64, 0xD8, 0xED, 0xB6, 0x22, 0x85, 0xE9, 0xE1, 0x02, 0xC8, 0xD1,
        0xD2, 0x73, 0x72, 0xB5,
    ];
    let expected_output = [
        0xED, 0x02, 0xD8, 0x25, 0x4D, 0x17, 0xFC, 0x60, 0xCA, 0xC2, 0xC8, 0xED, 0x4B, 0x88, 0x59,
        0x9B, 0x06, 0x7F, 0xA0, 0xD1, 0xB6, 0x67, 0xA3, 0x72, 0x95, 0xEB, 0x21, 0xF0, 0xD2, 0x22,
        0xE1, 0xA1, 0xCB, 0xD6, 0xB5, 0xC9, 0x4E, 0x73, 0x85, 0x31, 0xFD, 0x56, 0x02, 0x73, 0x7C,
        0xED, 0x72, 0xE9, 0x4F, 0x36, 0xC2, 0x54, 0x75, 0xC0, 0x54, 0xB5, 0xE1, 0x64, 0xD4, 0x2D,
        0xF0, 0x13, 0x74, 0xEC,
    ];
    let input_matrix = block_to_matrix(&input);
    let result = rotate_rows(input_matrix);
    assert_eq!(result, block_to_matrix(&expected_output));
}

#[test]
fn test_mix_columns() {
    let input = [
        0xED, 0x02, 0xD8, 0x25, 0x4D, 0x17, 0xFC, 0x60, 0xCA, 0xC2, 0xC8, 0xED, 0x4B, 0x88, 0x59,
        0x9B, 0x06, 0x7F, 0xA0, 0xD1, 0xB6, 0x67, 0xA3, 0x72, 0x95, 0xEB, 0x21, 0xF0, 0xD2, 0x22,
        0xE1, 0xA1, 0xCB, 0xD6, 0xB5, 0xC9, 0x4E, 0x73, 0x85, 0x31, 0xFD, 0x56, 0x02, 0x73, 0x7C,
        0xED, 0x72, 0xE9, 0x4F, 0x36, 0xC2, 0x54, 0x75, 0xC0, 0x54, 0xB5, 0xE1, 0x64, 0xD4, 0x2D,
        0xF0, 0x13, 0x74, 0xEC,
    ];
    let expected_output = [
        0x26, 0x02, 0xD1, 0xE5, 0x80, 0xD3, 0x12, 0x6B, 0x9B, 0x29, 0x3B, 0x34, 0x01, 0x8A, 0x69,
        0x0E, 0xBF, 0x72, 0xF1, 0x5B, 0xBD, 0xB2, 0xA1, 0x81, 0x1A, 0x50, 0xB3, 0x7E, 0x8F, 0x01,
        0xD3, 0x3D, 0x8A, 0xFD, 0xAA, 0x43, 0x50, 0xCF, 0xC9, 0x33, 0x81, 0xF6, 0x7A, 0x9B, 0x52,
        0x27, 0x3E, 0xC3, 0xAA, 0x3E, 0xC1, 0x41, 0xD6, 0xE3, 0x73, 0x58, 0x74, 0x79, 0x38, 0xEF,
        0x0A, 0x1C, 0x18, 0xEB,
    ];
    let input_matrix = block_to_matrix(&input);
    let result = mix_columns(input_matrix);
    assert_eq!(result, block_to_matrix(&expected_output));
}

#[test]
fn test_t_xor_l() {
    let input = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F,
    ];

    let expected_output = [
        0x4D, 0xA7, 0x4F, 0x33, 0xC3, 0x48, 0x5F, 0x0C, 0x95, 0x60, 0xF6, 0x40, 0x01, 0x44, 0x48,
        0x8E, 0x65, 0xE3, 0xC6, 0x9C, 0xD3, 0xB2, 0x96, 0xFB, 0xA3, 0xF3, 0x43, 0x0A, 0x2E, 0x15,
        0x4F, 0xE2, 0xE4, 0xB3, 0x2B, 0xB5, 0x03, 0xDF, 0xED, 0x48, 0x86, 0x0D, 0x18, 0xAE, 0xBC,
        0x3E, 0x13, 0x5C, 0xCF, 0x48, 0x53, 0xEB, 0x8C, 0xAF, 0xB6, 0xB6, 0x22, 0xBE, 0x8F, 0x75,
        0x62, 0xD0, 0x10, 0x10,
    ];

    let rounds = 1;
    let result = t_xor_l(&input, rounds);
    assert_eq!(result, expected_output);
}

#[test]
fn test_t_plus_l() {
    let input = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,
        0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C,
        0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0x3E, 0x3F,
    ];

    let expected_output = [
        0x26, 0x02, 0xD1, 0xE5, 0x80, 0xD3, 0x12, 0x6B, 0x9B, 0x29, 0x3B, 0x34, 0x01, 0x8A, 0x69,
        0x0E, 0xBF, 0x72, 0xF1, 0x5B, 0xBD, 0xB2, 0xA1, 0x81, 0x1A, 0x50, 0xB3, 0x7E, 0x8F, 0x01,
        0xD3, 0x3D, 0x8A, 0xFD, 0xAA, 0x43, 0x50, 0xCF, 0xC9, 0x33, 0x81, 0xF6, 0x7A, 0x9B, 0x52,
        0x27, 0x3E, 0xC3, 0xAA, 0x3E, 0xC1, 0x41, 0xD6, 0xE3, 0x73, 0x58, 0x74, 0x79, 0x38, 0xEF,
        0x0A, 0x1C, 0x18, 0xEB,
    ];

    let rounds = 1;
    let result = t_plus_l(&input, rounds);
    assert_eq!(result, expected_output);
}

#[test]
fn test_divide_into_blocks() {
    let message = b"hello";
    let padded_message = pad_message(message, L512);
    let blocks = divide_into_blocks(&padded_message, L512);
    assert_eq!(blocks.len(), padded_message.len() / (L512 / 8));
}

#[test]
fn test_xor_bytes() {
    let a = [0b10101010, 0b11110000];
    let b = [0b01010101, 0b00001111];
    let result = xor_bytes(&a, &b);
    assert_eq!(result, vec![0b11111111, 0b11111111]);
}

#[test]
fn test_r_l_n() {
    let block = vec![0xFF; 64]; // 512 bits
    let truncated = r_l_n(&block, 256);
    assert_eq!(truncated.len(), 256 / 8);
}

// Source: https://en.wikipedia.org/wiki/Kupyna
#[test]
fn test_kupyna_hash_empty_256() {
    let message = b"";
    let hash = kupyna_hash(message, 256);
    assert_eq!(
        hash,
        vec![
            0xcd, 0x51, 0x01, 0xd1, 0xcc, 0xdf, 0x0d, 0x1d, 0x1f, 0x4a, 0xda, 0x56, 0xe8, 0x88,
            0xcd, 0x72, 0x4c, 0xa1, 0xa0, 0x83, 0x8a, 0x35, 0x21, 0xe7, 0x13, 0x1d, 0x4f, 0xb7,
            0x8d, 0x0f, 0x5e, 0xb6
        ],
    );
}

#[test]
fn test_kupyna_hash_empty_512() {
    let message = b"";
    let hash = kupyna_hash(message, 512);
    // Source: https://en.wikipedia.org/wiki/Kupyna
    assert_eq!(
        hash,
        vec![
            0x65, 0x6b, 0x2f, 0x4c, 0xd7, 0x14, 0x62, 0x38, 0x8b, 0x64, 0xa3, 0x70, 0x43, 0xea,
            0x55, 0xdb, 0xe4, 0x45, 0xd4, 0x52, 0xae, 0xcd, 0x46, 0xc3, 0x29, 0x83, 0x43, 0x31,
            0x4e, 0xf0, 0x40, 0x19
        ],
    );
}

#[test]
fn test_kupyna_hash_dog() {
    let message = b"The quick brown fox jumps over the lazy dog.";
    let hash = kupyna_hash(message, 256);
    // Source: https://en.wikipedia.org/wiki/Kupyna
    assert_eq!(
        hash,
        vec![
            0x99, 0x68, 0x99, 0xf2, 0xd7, 0x42, 0x2c, 0xea, 0xf5, 0x52, 0x47, 0x50, 0x36, 0xb2,
            0xdc, 0x12, 0x06, 0x07, 0xef, 0xf5, 0x38, 0xab, 0xf2, 0xb8, 0xdf, 0xf4, 0x71, 0xa9,
            0x8a, 0x47, 0x40, 0xc6
        ],
    );
}

#[test]
fn test_kupyna_hash_dog_period() {
    let message = b"The quick brown fox jumps over the lazy dog.";
    let hash = kupyna_hash(message, 256);
    // Source: https://en.wikipedia.org/wiki/Kupyna
    assert_eq!(
        hash,
        vec![
            0x88, 0xea, 0x8c, 0xe9, 0x88, 0xfe, 0x67, 0xeb, 0x83, 0x96, 0x8c, 0xdc, 0x0f, 0x6f,
            0x3c, 0xa6, 0x93, 0xba, 0xa5, 0x02, 0x61, 0x20, 0x86, 0xc0, 0xdc, 0xec, 0x76, 0x1a,
            0x98, 0xe2, 0xfb, 0x1f
        ],
    );
}
